<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>

    <style>
        #main{
            position: absolute;
            width: 100%;
            height: 100%;
            top:0;
            left:0;
        }
        #c {
            border: 1px solid lightgrey;
            width: 100%;
            height: 100%;
        }

        .inline {
            display: inline-block;
            vertical-align: top;
        }
    </style>
</head>
<body>
    <div id="main">
        <div class="inline" >
            <canvas id="c"></canvas>

        </div>

        <div class="inline" style="display: inline-block; margin-left: 10px">
            <button id="drawing-mode" class="btn btn-info">Cancel drawing mode</button><br>
            <button id="clear-canvas" class="btn btn-info">Clear</button><br>
          
            <div id="drawing-mode-options">
              <label for="drawing-mode-selector">Mode:</label>
              <select id="drawing-mode-selector">
                <option>Pencil</option>
                <option>Circle</option>
                <option>Spray</option>
                <option>Pattern</option>
          
                <option>hline</option>
                <option>vline</option>
                <option>square</option>
                <option>diamond</option>
                <option>texture</option>
              </select><br>
          
              <label for="drawing-line-width">Line width:</label>
              <span class="info">30</span><input type="range" value="30" min="0" max="150" id="drawing-line-width"><br>
          
              <label for="drawing-color">Line color:</label>
              <input type="color" value="#005E7A" id="drawing-color"><br>
          
              <label for="drawing-shadow-color">Shadow color:</label>
              <input type="color" value="#005E7A" id="drawing-shadow-color"><br>
          
              <label for="drawing-shadow-width">Shadow width:</label>
              <span class="info">0</span><input type="range" value="0" min="0" max="50" id="drawing-shadow-width"><br>
          
              <label for="drawing-shadow-offset">Shadow offset:</label>
              <span class="info">0</span><input type="range" value="0" min="0" max="50" id="drawing-shadow-offset"><br>
            </div>
          </div>
    </div>


    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.3.1/fabric.min.js" integrity="sha512-ACqMrfAtm537AWzgx/xQ57JnFxXeq8RylQMGg4y/e6M2ew4Z8NycE8aId/Bt2ZE+w1gNsox3MgwxKl7SGMRdtA==" crossorigin="anonymous"></script> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.3.1/fabric.js" ></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.slim.js"></script>
    <script>

        var socket = io.connect('ws://localhost:9999', { transports: ['websocket'] });

        socket.emit('moveMouse', { text: 'Hello world.' }, function(response) {
            //console.log(response);
        });

        (function() {
            var $ = function(id){return document.getElementById(id)};

            var canvas = this.__canvas = new fabric.Canvas('c', {
                isDrawingMode: true,
            });
            canvas.setWidth( 800)
            canvas.setHeight( 800)

            const myId = Math.floor(Math.random()*100)
            let drawing = false 
            
            // start drawing
            canvas.on('mouse:down', e=>{
                socket.emit('startDrawing', {
                    body:e.absolutePointer
                })
            })

            // actual drawing
            canvas.on('mouse:move', e=>{
                socket.emit('draw', {
                    body:e.absolutePointer
                })
            })

            // stop drawing
            canvas.on('mouse:up', e=>{
                socket.emit('stopDrawing', {
                    body:e.absolutePointer
                })
            })

            // get drawing start signal from socket
            socket.on('startDrawing', data=>{
                if(!data.body)
                    return

                drawing = true
                const pointer = new fabric.Point( data.body.x, data.body.y)
                const opts = {pointer, e:{}}

                // start
                canvas.freeDrawingBrush.onMouseDown(pointer, opts)
            })

            // drawing signal from socket
            socket.on('draw', data=>{
                if(!data.body || !drawing)
                    return

                const pointer = new fabric.Point( data.body.x, data.body.y)
                const opts = {pointer, e:{}}

                // start
                canvas.freeDrawingBrush.onMouseMove(pointer, opts)
            })

            // stop drawing signal from socket
            socket.on('stopDrawing', data=>{
                if(!data.body)
                    return

                drawing = false
                const pointer = new fabric.Point( data.body.x, data.body.y)
                const opts = {pointer, e:{}}

                // start
                canvas.freeDrawingBrush.onMouseUp(opts)
            })

            // socket.on('mouseMoved', data=>{
            //     if(!data.body)
            //         return 

            //     const {x,y} = data.body
            //     // canvas.add(new fabric.Line([1,1,2,2], {
            //     //     left: x,
            //     //     top: y,
            //     //     stroke: 'red',
            //     // }))
            //     let pointer = new fabric.Point(x, y)
            //    canvas.freeDrawingBrush.onMouseMove( pointer, {
            //        pointer,
            //        e: {}
            //    } )
                
            // })



            fabric.Object.prototype.transparentCorners = false;

            var drawingModeEl = $('drawing-mode'),
                drawingOptionsEl = $('drawing-mode-options'),
                drawingColorEl = $('drawing-color'),
                drawingShadowColorEl = $('drawing-shadow-color'),
                drawingLineWidthEl = $('drawing-line-width'),
                drawingShadowWidth = $('drawing-shadow-width'),
                drawingShadowOffset = $('drawing-shadow-offset'),
                clearEl = $('clear-canvas');

            clearEl.onclick = function() { canvas.clear() };

            drawingModeEl.onclick = function() {
                canvas.isDrawingMode = !canvas.isDrawingMode;
                if (canvas.isDrawingMode) {
                drawingModeEl.innerHTML = 'Cancel drawing mode';
                drawingOptionsEl.style.display = '';
                }
                else {
                drawingModeEl.innerHTML = 'Enter drawing mode';
                drawingOptionsEl.style.display = 'none';
                }
            };

            if (fabric.PatternBrush) {
                var vLinePatternBrush = new fabric.PatternBrush(canvas);
                vLinePatternBrush.getPatternSrc = function() {

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = 10;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.strokeStyle = this.color;
                    ctx.lineWidth = 5;
                    ctx.beginPath();
                    ctx.moveTo(0, 5);
                    ctx.lineTo(10, 5);
                    ctx.closePath();
                    ctx.stroke();

                    return patternCanvas;
                };

                var hLinePatternBrush = new fabric.PatternBrush(canvas);
                hLinePatternBrush.getPatternSrc = function() {

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = 10;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.strokeStyle = this.color;
                    ctx.lineWidth = 5;
                    ctx.beginPath();
                    ctx.moveTo(5, 0);
                    ctx.lineTo(5, 10);
                    ctx.closePath();
                    ctx.stroke();

                    return patternCanvas;
                };

                var squarePatternBrush = new fabric.PatternBrush(canvas);
                squarePatternBrush.getPatternSrc = function() {

                    var squareWidth = 10, squareDistance = 2;

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = squareWidth + squareDistance;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.fillStyle = this.color;
                    ctx.fillRect(0, 0, squareWidth, squareWidth);

                    return patternCanvas;
                };

                var diamondPatternBrush = new fabric.PatternBrush(canvas);
                diamondPatternBrush.getPatternSrc = function() {

                    var squareWidth = 10, squareDistance = 5;
                    var patternCanvas = fabric.document.createElement('canvas');
                    var rect = new fabric.Rect({
                        width: squareWidth,
                        height: squareWidth,
                        angle: 45,
                        fill: this.color
                    });

                    var canvasWidth = rect.getBoundingRect().width;

                    patternCanvas.width = patternCanvas.height = canvasWidth + squareDistance;
                    rect.set({ left: canvasWidth / 2, top: canvasWidth / 2 });

                    var ctx = patternCanvas.getContext('2d');
                    rect.render(ctx);

                    return patternCanvas;
                };

                var img = new Image();
                img.src = '../assets/honey_im_subtle.png';

                var texturePatternBrush = new fabric.PatternBrush(canvas);
                texturePatternBrush.source = img;
            }

            $('drawing-mode-selector').onchange = function() {

                if (this.value === 'hline') {
                canvas.freeDrawingBrush = vLinePatternBrush;
                }
                else if (this.value === 'vline') {
                canvas.freeDrawingBrush = hLinePatternBrush;
                }
                else if (this.value === 'square') {
                canvas.freeDrawingBrush = squarePatternBrush;
                }
                else if (this.value === 'diamond') {
                canvas.freeDrawingBrush = diamondPatternBrush;
                }
                else if (this.value === 'texture') {
                canvas.freeDrawingBrush = texturePatternBrush;
                }
                else {
                canvas.freeDrawingBrush = new fabric[this.value + 'Brush'](canvas);
                }

                if (canvas.freeDrawingBrush) {
                var brush = canvas.freeDrawingBrush;
                brush.color = drawingColorEl.value;
                if (brush.getPatternSrc) {
                    brush.source = brush.getPatternSrc.call(brush);
                }
                brush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
                brush.shadow = new fabric.Shadow({
                    blur: parseInt(drawingShadowWidth.value, 10) || 0,
                    offsetX: 0,
                    offsetY: 0,
                    affectStroke: true,
                    color: drawingShadowColorEl.value,
                });
                }
            };

            drawingColorEl.onchange = function() {
                var brush = canvas.freeDrawingBrush;
                brush.color = this.value;
                if (brush.getPatternSrc) {
                brush.source = brush.getPatternSrc.call(brush);
                }
            };
            drawingShadowColorEl.onchange = function() {
                canvas.freeDrawingBrush.shadow.color = this.value;
            };
            drawingLineWidthEl.onchange = function() {
                canvas.freeDrawingBrush.width = parseInt(this.value, 10) || 1;
                this.previousSibling.innerHTML = this.value;
            };
            drawingShadowWidth.onchange = function() {
                canvas.freeDrawingBrush.shadow.blur = parseInt(this.value, 10) || 0;
                this.previousSibling.innerHTML = this.value;
            };
            drawingShadowOffset.onchange = function() {
                canvas.freeDrawingBrush.shadow.offsetX = parseInt(this.value, 10) || 0;
                canvas.freeDrawingBrush.shadow.offsetY = parseInt(this.value, 10) || 0;
                this.previousSibling.innerHTML = this.value;
            };

            if (canvas.freeDrawingBrush) {
                canvas.freeDrawingBrush.color = drawingColorEl.value;
                canvas.freeDrawingBrush.source = canvas.freeDrawingBrush.getPatternSrc.call(this);
                canvas.freeDrawingBrush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
                canvas.freeDrawingBrush.shadow = new fabric.Shadow({
                    blur: parseInt(drawingShadowWidth.value, 10) || 0,
                    offsetX: 0,
                    offsetY: 0,
                    affectStroke: true,
                    color: drawingShadowColorEl.value,
                });
            }
        })();

    </script>
</body>
</html>
